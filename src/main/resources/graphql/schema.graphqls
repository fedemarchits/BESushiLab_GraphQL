#ERRORI POSSIBILI
interface BaseError {
    message: String
}

type InvalidInputError implements BaseError {
    message: String
}

type NotFoundError implements BaseError {
    message: String
}

type UnknownError implements BaseError {
    message: String
}

type NotAllowedError implements BaseError {
    message: String
}


#TIPI UNION CON ERRORI
union PiattiPrevResult = PiattoPreview | NotFoundError | NotAllowedError | InvalidInputError | UnknownError
union PiattoUpResult = PiattoUpload | NotFoundError | NotAllowedError | InvalidInputError | UnknownError
union MenuResult = Menu | NotFoundError | NotAllowedError | InvalidInputError | UnknownError
union FasciaOrariaRes = FasciaOraria | NotFoundError | NotAllowedError | InvalidInputError | UnknownError
union PiattoRes = Piatto | NotFoundError | NotAllowedError | InvalidInputError | UnknownError
union SessionRes = Session | NotFoundError | NotAllowedError | InvalidInputError | UnknownError
union MenuCompattoRes = MenuCompatto | NotFoundError | NotAllowedError | InvalidInputError | UnknownError
union OrdineDettaglioRes = OrdineDettaglio | NotFoundError | NotAllowedError | InvalidInputError | UnknownError
union OrdineRes = Ordine | NotFoundError | NotAllowedError | InvalidInputError | UnknownError
union BooleanRes = BooleanC | NotFoundError | NotAllowedError | InvalidInputError | UnknownError


#QUERY
type Query {
    ottieniListaPiatti(idPersona: String!): [PiattiPrevResult]
    ottieniPiatto(idPersona: String!, idPiatto: String!): PiattoUpResult
    ottieniListaMenu(idPersona: String!): [MenuResult]
    ottieniMenu(idPersona: String!, idMenu: String!): MenuResult
    #MENU CONTROLLER
    #Oltre ad essere due con nome uguale, devo capire bene il tipo di
    #ritorno che non Ã¨ esattamente un Menu, ma un ArraySezione
    #ottieniMenu(idMenu: String!, idPersona: String!): MenuResult
    ottieniListaFasce(idMenu: Int!, idPersona: String!): [FasciaOrariaRes]
    ottieniListaPreferiti(idMenu: Int!, idPersona: String!): [PiattoRes]
    #TAVOLO CONTROLLER
    ottieniSessione(idTavolo: String!) : MenuCompattoRes
    ottieniOrdiniPersona(idTavolo: String!, idPersona: String!) : [OrdineDettaglioRes]
    ottieniOrdiniTavolo(idTavolo: String!, idPersona: String!) : [OrdineDettaglioRes]
    ottieniGliOrdiniInArrivo(idTavolo: String!, idPersona: String!) : [OrdineDettaglioRes]
    spostaGliOrdiniInArrivo(idTavolo : String!) : BooleanRes
    mergeTavolo(idTavolo : String!, body: [OrdineMergeInput]) : BooleanRes
}

type Mutation {
    nuovoPiatto(idPersona: String!, piatto: PiattoUploadInput!): PiattoUpResult
    eliminaPiatto(idPersona: String!, idPiatto: String!): PiattoUpResult
    aggiornaPiatto(idPersona: String!, piatto: PiattoUploadInput): PiattoUpResult
    nuovoMenu(idPersona: String!, name: String!): MenuResult
    aggiornaMenu(idPersona: String!, menu: MenuInput!): MenuResult
    eliminaMenu(idPersona: String!, idMenu: String!): MenuResult
    eseguiLogin(utente: UtenteInput!): IdToken
    #TAVOLO CONTROLLER
    creaSessione(idPersona: String!) : SessionRes
    chiudiSessione(idTabolo: String!) : SessionRes
    modificaOrdiniPersona(idTavolo: String!, idPersona: String!, listaOrdini: [OrdineInput]) : [OrdineRes]
}

#SCHEMA
type Utente{
    email: String!
    password: String!
    isGestore: Boolean
    tavolo: Session
    idPersona: IdToken
}

type IdToken {
    idToken: ID!
    cliente: Utente
}

type Session {
    idTable: ID!
}

type Menu {
    id: ID!
    nome: String
    #menu: [SezionePreview]
    #fasce: [FasciaOraria]
}

type PiattoPreview{
    id: ID!
    numero: Int
    variante: String
    nome: String
    consigliato: Boolean
    limite: Int
    #piattoUpload: piattoUpload
    #sezionePreview: sezionePreview
}

type PiattoUpload{
    id: ID!
    numero: Int
    variante: String
    nome: String
    prezzo: Int
    immagine: String
    alt: String
    allergeni: [String]
    ingredienti: [String]
}

type FasciaOraria {
    id: ID!
    giorno: String
    orarioInizio: Int
    orarioFine: Int
    menu: Menu
}

type Piatto {
    id: ID!
    numero: Int
    variante: String
    nome: String
    prezzo: Float
    allergeni: [String]
    ingredienti: [String]
    limite: Int
    valutazioneMedia: Int
    valutazioneUtente: Int
    preferito: Boolean
    ultimoOrdine: String
    popolare: Boolean
    consigliato: Boolean
    immagine: String
    alt: String
}

type MenuCompatto {
    menu: [Menu]
}

type OrdineDettaglio {
    piatto: Piatto
    molteplicita: Int
    note: [String]
}

type Ordine {
    id: ID!
    count: Int
    idPiatto: Int
    note: String
    inArrivo: Boolean
    idPersona: IdToken
    idTavolo: Session
}

type BooleanC {
    boolean: Boolean!
}
#TIPI INPUT
input PiattoUploadInput{
    id: ID!
    numero: Int
    variante: String
    nome: String
    prezzo: Int
    immagine: String
    alt: String
    allergeni: [String]
    ingredienti: [String]
}

input MenuInput {
    id: ID!
    nome: String
    #menu: [SezionePreview]
    #fasce: [FasciaOraria]
}

input UtenteInput {
    email: String!
    password: String!
    isGestore: Boolean
    idPersona: IdTokenInput
}

input IdTokenInput {
    idToken: ID!
    cliente: UtenteInput
}

input OrdineInput {
    id: ID!
    count: Int
    idPiatto: Int
    note: String
    inArrivo: Boolean
    idPersona: IdTokenInput
    idTavolo: SessionInput
}

input SessionInput {
    idTable: ID!
}

input OrdineMergeInput {
    idPiatto: ID!
    count : Int
    note: String
    idPersona: String
}